{"ast":null,"code":"var _jsxFileName = \"/home/satyaraj/Desktop/bakery-frontend/src/layout/Protected.jsx\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport { useDispatch } from \"react-redux\";\nimport { authActions, logout } from \"../store/authSlice\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport api from \"../service\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProtectedPages() {\n  _s();\n  const dispatch = useDispatch();\n  const email = useSelector(state => state.auth.user.email);\n  useEffect(() => {\n    const authenticateUser = async () => {\n      try {\n        console.log(\"protected route render...\");\n        axios.defaults.withCredentials = true;\n        const response = await api.get(\"/authenticate\", {\n          withCredentials: true\n        });\n        console.log(response);\n        console.log(\"setting login state again\");\n        dispatch(authActions.login({\n          id: response.data.id,\n          email: response.data.email\n        }));\n      } catch (error) {\n        toast.error(\"Session expired please login again\");\n        dispatch(logout(email));\n      }\n    };\n    authenticateUser();\n  });\n  console.log(\"checking state\");\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), isAuthenticated ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true);\n}\n_s(ProtectedPages, \"mJkr2QUE/Yu5Lmg0DfsouQrMaVk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ProtectedPages;\nexport default ProtectedPages;\nvar _c;\n$RefreshReg$(_c, \"ProtectedPages\");","map":{"version":3,"names":["useSelector","Navigate","Outlet","Navbar","useDispatch","authActions","logout","useEffect","axios","toast","api","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedPages","_s","dispatch","email","state","auth","user","authenticateUser","console","log","defaults","withCredentials","response","get","login","id","data","error","isAuthenticated","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/home/satyaraj/Desktop/bakery-frontend/src/layout/Protected.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport { useDispatch } from \"react-redux\";\nimport { authActions,logout } from \"../store/authSlice\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport api from \"../service\";\n\nfunction ProtectedPages(){\n\n    const dispatch = useDispatch();\n    const email = useSelector(state=>state.auth.user.email);\n    useEffect(() => {\n      const authenticateUser = async () => {\n        try {\n          console.log(\"protected route render...\");\n            axios.defaults.withCredentials = true;\n            const response = await api.get(\"/authenticate\", {\n              withCredentials: true,\n            });\n            console.log(response);\n            console.log(\"setting login state again\");\n            dispatch(authActions.login({\n              id:response.data.id,\n              email:response.data.email,\n          }));\n          \n        } catch (error) {\n          toast.error(\"Session expired please login again\");\n          dispatch(logout(email));\n        }\n      };\n  \n      authenticateUser();\n    });\n\n    console.log(\"checking state\");\n    const isAuthenticated = useSelector((state)=>state.auth.isAuthenticated);\n\nreturn(\n    <>\n        <Navbar />\n\n        {isAuthenticated ? <Outlet />:<Navigate to=\"/login\" />}\n    </>\n\n);\n}\n\nexport default ProtectedPages;"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,EAACC,MAAM,QAAQ,oBAAoB;AACvD,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,GAAG,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7B,SAASC,cAAcA,CAAA,EAAE;EAAAC,EAAA;EAErB,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,KAAK,GAAGlB,WAAW,CAACmB,KAAK,IAAEA,KAAK,CAACC,IAAI,CAACC,IAAI,CAACH,KAAK,CAAC;EACvDX,SAAS,CAAC,MAAM;IACd,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACtChB,KAAK,CAACiB,QAAQ,CAACC,eAAe,GAAG,IAAI;QACrC,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,GAAG,CAAC,eAAe,EAAE;UAC9CF,eAAe,EAAE;QACnB,CAAC,CAAC;QACFH,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;QACrBJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxCP,QAAQ,CAACZ,WAAW,CAACwB,KAAK,CAAC;UACzBC,EAAE,EAACH,QAAQ,CAACI,IAAI,CAACD,EAAE;UACnBZ,KAAK,EAACS,QAAQ,CAACI,IAAI,CAACb;QACxB,CAAC,CAAC,CAAC;MAEL,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdvB,KAAK,CAACuB,KAAK,CAAC,oCAAoC,CAAC;QACjDf,QAAQ,CAACX,MAAM,CAACY,KAAK,CAAC,CAAC;MACzB;IACF,CAAC;IAEDI,gBAAgB,CAAC,CAAC;EACpB,CAAC,CAAC;EAEFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,MAAMS,eAAe,GAAGjC,WAAW,CAAEmB,KAAK,IAAGA,KAAK,CAACC,IAAI,CAACa,eAAe,CAAC;EAE5E,oBACIrB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACItB,OAAA,CAACT,MAAM;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAETL,eAAe,gBAAGrB,OAAA,CAACV,MAAM;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAC1B,OAAA,CAACX,QAAQ;MAACsC,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACxD,CAAC;AAGP;AAACtB,EAAA,CAvCQD,cAAc;EAAA,QAEFX,WAAW,EACdJ,WAAW,EA0BDA,WAAW;AAAA;AAAAwC,EAAA,GA7B9BzB,cAAc;AAyCvB,eAAeA,cAAc;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}