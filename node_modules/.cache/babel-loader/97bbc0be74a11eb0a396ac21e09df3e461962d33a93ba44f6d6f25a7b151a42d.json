{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Cookies from \"js-cookie\";\nimport api from \"../service\";\nexport const logout = createAsyncThunk('logout', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  // Using getState instead of parameter\n  try {\n    const state = getState();\n    const email = state.auth.user.id; // Get email from Redux state\n    const response = await api.post(\"/logout\", {\n      id\n    });\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst initialState = {\n  user: {\n    id: \"\",\n    email: \"\"\n  },\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: initialState,\n  reducers: {\n    login(state, actions) {\n      console.log(\"inside login...\");\n      state.isAuthenticated = true;\n      state.user = {\n        id: actions.payload.id,\n        email: actions.payload.email\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(logout.fulfilled, (state, action) => {\n      Cookies.remove(\"accessToken\", {\n        path: \"/\"\n      });\n      Cookies.remove(\"refreshToken\", {\n        path: \"/\"\n      });\n      state.isAuthenticated = false;\n      state.user = {\n        id: \"\",\n        email: \"\"\n      };\n    }).addCase(logout.rejected, (state, action) => {\n      Cookies.remove(\"accessToken\", {\n        path: \"/\"\n      });\n      Cookies.remove(\"refreshToken\", {\n        path: \"/\"\n      });\n      state.isAuthenticated = false;\n      state.user = {\n        id: \"\",\n        email: \"\"\n      };\n    });\n  }\n});\nexport const authActions = authSlice.actions;\nexport default authSlice;","map":{"version":3,"names":["createSlice","createAsyncThunk","Cookies","api","logout","_","getState","rejectWithValue","state","email","auth","user","id","response","post","data","error","initialState","isAuthenticated","authSlice","name","reducers","login","actions","console","log","payload","extraReducers","builder","addCase","fulfilled","action","remove","path","rejected","authActions"],"sources":["/home/satyaraj/Desktop/bakery-frontend/src/store/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Cookies from \"js-cookie\";\nimport api from \"../service\";\n\nexport const logout = createAsyncThunk(\n    'logout',\n    async (_, { getState, rejectWithValue }) => {  // Using getState instead of parameter\n      try {\n        const state = getState();\n        const email = state.auth.user.id;  // Get email from Redux state\n        const response = await api.post(\"/logout\", { id });\n        return response.data;\n      } catch (error) {\n        return rejectWithValue(error.response.data);\n      }\n    }\n  );\n\nconst initialState = {\n    user: {\n        id:\"\",\n        email:\"\"\n    },\n    isAuthenticated:false\n}\n\nconst authSlice = createSlice({\n    name:\"auth\",\n    initialState:initialState,\n    reducers:{\n        login(state,actions){\n            console.log(\"inside login...\");\n            state.isAuthenticated = true;\n            state.user = {\n                id: actions.payload.id,\n                email: actions.payload.email\n            }\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n        .addCase(logout.fulfilled, (state, action) =>{\n        Cookies.remove(\"accessToken\", { path: \"/\" });\n        Cookies.remove(\"refreshToken\", { path: \"/\" });\n        state.isAuthenticated = false;\n        state.user = {\n          id: \"\",\n          email: \"\"\n        };\n        })\n        .addCase(logout.rejected, (state, action) => {\n        Cookies.remove(\"accessToken\", { path: \"/\" });\n        Cookies.remove(\"refreshToken\", { path: \"/\" });\n        state.isAuthenticated = false;\n        state.user = {\n          id: \"\",\n          email: \"\"\n        };\n        });\n    }\n});\n\nexport const authActions = authSlice.actions;\nexport default authSlice;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,GAAG,MAAM,YAAY;AAE5B,OAAO,MAAMC,MAAM,GAAGH,gBAAgB,CAClC,QAAQ,EACR,OAAOI,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAAG;EAC7C,IAAI;IACF,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;IACxB,MAAMG,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,CAACC,EAAE,CAAC,CAAE;IACnC,MAAMC,QAAQ,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,SAAS,EAAE;MAAEF;IAAG,CAAC,CAAC;IAClD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOT,eAAe,CAACS,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;EAC7C;AACF,CACF,CAAC;AAEH,MAAME,YAAY,GAAG;EACjBN,IAAI,EAAE;IACFC,EAAE,EAAC,EAAE;IACLH,KAAK,EAAC;EACV,CAAC;EACDS,eAAe,EAAC;AACpB,CAAC;AAED,MAAMC,SAAS,GAAGnB,WAAW,CAAC;EAC1BoB,IAAI,EAAC,MAAM;EACXH,YAAY,EAACA,YAAY;EACzBI,QAAQ,EAAC;IACLC,KAAKA,CAACd,KAAK,EAACe,OAAO,EAAC;MAChBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BjB,KAAK,CAACU,eAAe,GAAG,IAAI;MAC5BV,KAAK,CAACG,IAAI,GAAG;QACTC,EAAE,EAAEW,OAAO,CAACG,OAAO,CAACd,EAAE;QACtBH,KAAK,EAAEc,OAAO,CAACG,OAAO,CAACjB;MAC3B,CAAC;IACL;EACJ,CAAC;EACDkB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACNC,OAAO,CAACzB,MAAM,CAAC0B,SAAS,EAAE,CAACtB,KAAK,EAAEuB,MAAM,KAAI;MAC7C7B,OAAO,CAAC8B,MAAM,CAAC,aAAa,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MAC5C/B,OAAO,CAAC8B,MAAM,CAAC,cAAc,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MAC7CzB,KAAK,CAACU,eAAe,GAAG,KAAK;MAC7BV,KAAK,CAACG,IAAI,GAAG;QACXC,EAAE,EAAE,EAAE;QACNH,KAAK,EAAE;MACT,CAAC;IACD,CAAC,CAAC,CACDoB,OAAO,CAACzB,MAAM,CAAC8B,QAAQ,EAAE,CAAC1B,KAAK,EAAEuB,MAAM,KAAK;MAC7C7B,OAAO,CAAC8B,MAAM,CAAC,aAAa,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MAC5C/B,OAAO,CAAC8B,MAAM,CAAC,cAAc,EAAE;QAAEC,IAAI,EAAE;MAAI,CAAC,CAAC;MAC7CzB,KAAK,CAACU,eAAe,GAAG,KAAK;MAC7BV,KAAK,CAACG,IAAI,GAAG;QACXC,EAAE,EAAE,EAAE;QACNH,KAAK,EAAE;MACT,CAAC;IACD,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM0B,WAAW,GAAGhB,SAAS,CAACI,OAAO;AAC5C,eAAeJ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}