{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n  // Replace with your API base URL\n});\n\n// Add a request interceptor\n// api.interceptors.request.use(\n//   (config) => {\n//     config.withCredentials = true;\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\napi.interceptors.response.use(response => response, async error => {\n  var _error$response, _error$response$data;\n  const originalRequest = error.config;\n  const isTokenExpired = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.status) === 777; // If sending custom status code\n  // Only attempt refresh for token expiration\n  if (isTokenExpired && !originalRequest._retry) {\n    originalRequest._retry = true;\n    Cookies.remove(\"accessToken\");\n    try {\n      const refreshToken = Cookies.get(\"refreshToken\");\n      const data = {\n        refreshToken\n      };\n      const response = await api.post('/refresh', data, {\n        withCredentials: true\n      });\n      console.log(\"/refresh has been hit...\");\n      console.log(response.data.message);\n      // Retry original request\n      return api(originalRequest);\n    } catch (refreshError) {\n      Cookies.remove(\"accessToken\", {\n        path: \"/\"\n      });\n      Cookies.remove(\"refreshToken\", {\n        path: \"/\"\n      });\n      // const navigate = Navigate();\n      // navigate(\"/login\");\n      return Promise.reject(refreshError);\n    }\n  }\n  // For all other errors, reject normally\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","Cookies","api","create","baseURL","headers","withCredentials","interceptors","response","use","error","_error$response","_error$response$data","originalRequest","config","isTokenExpired","data","status","_retry","remove","refreshToken","get","post","console","log","message","refreshError","path","Promise","reject"],"sources":["/home/satyaraj/Desktop/bakery-frontend/src/service/index.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/',\n  headers: {\n          'Content-Type': 'application/json'\n            },\n  withCredentials:false\n // Replace with your API base URL\n});\n\n// Add a request interceptor\n// api.interceptors.request.use(\n//   (config) => {\n//     config.withCredentials = true;\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n      const isTokenExpired = error.response?.data?.status === 777;// If sending custom status code\n    // Only attempt refresh for token expiration\n    if (isTokenExpired && !originalRequest._retry) {\n      originalRequest._retry = true;\n      Cookies.remove(\"accessToken\");\n      try {\n        const refreshToken = Cookies.get(\"refreshToken\");\n        const data = {\n          refreshToken,\n        }\n        const response = await api.post('/refresh', data, {\n          withCredentials: true\n        });\n        console.log(\"/refresh has been hit...\")\n        console.log(response.data.message);\n        // Retry original request\n        return api(originalRequest);\n\n      } catch (refreshError) {\n        Cookies.remove(\"accessToken\", { path: \"/\" });\n        Cookies.remove(\"refreshToken\", { path: \"/\" });        \n        // const navigate = Navigate();\n        // navigate(\"/login\");\n        return Promise.reject(refreshError);\n      }\n    }\n    // For all other errors, reject normally\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE;IACD,cAAc,EAAE;EACd,CAAC;EACXC,eAAe,EAAC;EACjB;AACD,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA,EAAAC,oBAAA;EACf,MAAMC,eAAe,GAAGH,KAAK,CAACI,MAAM;EAElC,MAAMC,cAAc,GAAG,EAAAJ,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBK,IAAI,cAAAJ,oBAAA,uBAApBA,oBAAA,CAAsBK,MAAM,MAAK,GAAG,CAAC;EAC9D;EACA,IAAIF,cAAc,IAAI,CAACF,eAAe,CAACK,MAAM,EAAE;IAC7CL,eAAe,CAACK,MAAM,GAAG,IAAI;IAC7BjB,OAAO,CAACkB,MAAM,CAAC,aAAa,CAAC;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGnB,OAAO,CAACoB,GAAG,CAAC,cAAc,CAAC;MAChD,MAAML,IAAI,GAAG;QACXI;MACF,CAAC;MACD,MAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAACoB,IAAI,CAAC,UAAU,EAAEN,IAAI,EAAE;QAChDV,eAAe,EAAE;MACnB,CAAC,CAAC;MACFiB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCD,OAAO,CAACC,GAAG,CAAChB,QAAQ,CAACQ,IAAI,CAACS,OAAO,CAAC;MAClC;MACA,OAAOvB,GAAG,CAACW,eAAe,CAAC;IAE7B,CAAC,CAAC,OAAOa,YAAY,EAAE;MACrBzB,OAAO,CAACkB,MAAM,CAAC,aAAa,EAAE;QAAEQ,IAAI,EAAE;MAAI,CAAC,CAAC;MAC5C1B,OAAO,CAACkB,MAAM,CAAC,cAAc,EAAE;QAAEQ,IAAI,EAAE;MAAI,CAAC,CAAC;MAC7C;MACA;MACA,OAAOC,OAAO,CAACC,MAAM,CAACH,YAAY,CAAC;IACrC;EACF;EACA;EACA,OAAOE,OAAO,CAACC,MAAM,CAACnB,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}