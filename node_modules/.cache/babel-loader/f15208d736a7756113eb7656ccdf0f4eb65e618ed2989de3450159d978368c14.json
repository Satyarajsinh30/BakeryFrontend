{"ast":null,"code":"var _s = $RefreshSig$();\n// src/services/api.js\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { logout } from '../store/authSlice';\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n  // Replace with your API base URL\n});\n\n// Add a request interceptor\napi.interceptors.request.use(config => {\n  config.withCredentials = true;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n_s(api.interceptors.response.use(response => response, _s(async error => {\n  var _error$response, _error$response$data;\n  _s();\n  const originalRequest = error.config;\n  const isTokenExpired = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.status) === 777; // If sending custom status code\n  // Only attempt refresh for token expiration\n  if (isTokenExpired && !originalRequest._retry) {\n    originalRequest._retry = true;\n    Cookies.remove(\"accessToken\");\n    try {\n      const refreshToken = Cookies.get(\"refreshToken\");\n      const data = {\n        refreshToken\n      };\n      const response = await api.post('/refresh', data, {\n        withCredentials: true\n      });\n      console.log(\"/refresh has been hit...\");\n      console.log(response.data.message);\n      // Retry original request\n      return api(originalRequest);\n    } catch (refreshError) {\n      useDispatch(logout(id));\n      // const navigate = Navigate();\n      // navigate(\"/login\");\n      return Promise.reject(refreshError);\n    }\n  }\n  // For all other errors, reject normally\n  return Promise.reject(error);\n}, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n})), \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport default api;","map":{"version":3,"names":["axios","Cookies","useDispatch","Navigate","logout","api","create","baseURL","headers","interceptors","request","use","config","withCredentials","error","Promise","reject","_s","response","_error$response","_error$response$data","originalRequest","isTokenExpired","data","status","_retry","remove","refreshToken","get","post","console","log","message","refreshError","id"],"sources":["/home/satyaraj/Desktop/bakery-frontend/src/service/index.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { logout } from '../store/authSlice';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8080/',\n  headers: {\n          'Content-Type': 'application/json'\n            }\n // Replace with your API base URL\n});\n\n// Add a request interceptor\napi.interceptors.request.use(\n  (config) => {\n    config.withCredentials = true;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n      const isTokenExpired = error.response?.data?.status === 777;// If sending custom status code\n    // Only attempt refresh for token expiration\n    if (isTokenExpired && !originalRequest._retry) {\n      originalRequest._retry = true;\n      Cookies.remove(\"accessToken\");\n      try {\n        const refreshToken = Cookies.get(\"refreshToken\");\n        const data = {\n          refreshToken,\n        }\n        const response = await api.post('/refresh', data, {\n          withCredentials: true\n        });\n        console.log(\"/refresh has been hit...\")\n        console.log(response.data.message);\n        // Retry original request\n        return api(originalRequest);\n\n      } catch (refreshError) {\n        useDispatch(logout(id));\n        // const navigate = Navigate();\n        // navigate(\"/login\");\n        return Promise.reject(refreshError);\n      }\n    }\n    // For all other errors, reject normally\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,MAAM,QAAQ,oBAAoB;AAE3C,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE;IACD,cAAc,EAAE;EACd;EACX;AACD,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACVA,MAAM,CAACC,eAAe,GAAG,IAAI;EAC7B,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDG,EAAA,CAAAZ,GAAG,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EAAAD,EAAA,CACtB,MAAOH,KAAK,IAAK;EAAA,IAAAK,eAAA,EAAAC,oBAAA;EAAAH,EAAA;EACf,MAAMI,eAAe,GAAGP,KAAK,CAACF,MAAM;EAElC,MAAMU,cAAc,GAAG,EAAAH,eAAA,GAAAL,KAAK,CAACI,QAAQ,cAAAC,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBI,MAAM,MAAK,GAAG,CAAC;EAC9D;EACA,IAAIF,cAAc,IAAI,CAACD,eAAe,CAACI,MAAM,EAAE;IAC7CJ,eAAe,CAACI,MAAM,GAAG,IAAI;IAC7BxB,OAAO,CAACyB,MAAM,CAAC,aAAa,CAAC;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAG1B,OAAO,CAAC2B,GAAG,CAAC,cAAc,CAAC;MAChD,MAAML,IAAI,GAAG;QACXI;MACF,CAAC;MACD,MAAMT,QAAQ,GAAG,MAAMb,GAAG,CAACwB,IAAI,CAAC,UAAU,EAAEN,IAAI,EAAE;QAChDV,eAAe,EAAE;MACnB,CAAC,CAAC;MACFiB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCD,OAAO,CAACC,GAAG,CAACb,QAAQ,CAACK,IAAI,CAACS,OAAO,CAAC;MAClC;MACA,OAAO3B,GAAG,CAACgB,eAAe,CAAC;IAE7B,CAAC,CAAC,OAAOY,YAAY,EAAE;MACrB/B,WAAW,CAACE,MAAM,CAAC8B,EAAE,CAAC,CAAC;MACvB;MACA;MACA,OAAOnB,OAAO,CAACC,MAAM,CAACiB,YAAY,CAAC;IACrC;EACF;EACA;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC;EAAA,QARKZ,WAAW;AAAA,EASnB,CAAC;EAAA,QATOA,WAAW;AAAA;AAWnB,eAAeG,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}